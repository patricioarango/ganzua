Registro:

Cuando abrimos la app por primera vez, no sabemos quién es el usuario, por eso creamos un usuario anónimo. También obtenemos el id para enviar mensajes y lo guardamos a ese usuario. 

UPDATE: Ahora el auth se hace en el mismo sitio donde queremos usar ganzúa. Se agrega el controlador y la vista Ganzúa. 
Se loguea con Google.
En firebase console hay una function que chequea si el email está en la whitelist.
Si está, el status es enabled. 
Se genera un QR que contiene: email, displayName,photoUrl.

	-En Firebase admin se chequea que el email esté en la whitelist.
	-Si está en la whitelist, creamos el usuario en usuarios_registrados con status "enabled".
	-Si no, lo creamos con status disabled. 
	-Si luego le quiero dar permisos a ese usuario, lo que tengo que hacer es:
		1) Agregarlo a la Whitelist.
		2) Borrarlo de usuarios registrados.
		3) Eliminar la cuenta de Firebase Console > Auth > Usuarios (buscar por email). Esto es para que el trigger de la Cloud Function (onCreate) funcione otra vez.
		3) b) La otra es agregarlo a la whitelist y ponerle status "enabled" en usuarios_registrados. 

Seguridad: Whitelist y Usuarios_Registrados no tienen permisos de escritura, por lo que sólo pueden ser modificadas desde el admin o desde la cloud function.

Estados: Disabled, Enabled, Ready

Desde la App, lo primero que hay que hacer es escanear un QR de registro.
Luego de leer ese QR, una cloud function debe tomar el email leído, hacer un update y ponerle el device id. 
	-Poner status "ready"
	-Enviar Notification.

Una card por cada app que tiene en whitelist. 
	Estados -> logueado (desloguear, pc data)
				/ no logueado 

Logueos en desktops
PC genera computerid. 
Usuario registrado escanea computerid. 
Ese computerid permite el ingreso. 



AGREGAR LO DE FIREBASE a iron_acl


Ganzua signup controller (autowikipedia) controla el primer paso de registración
Ganzua (autowikipedia) controller funciones generales centralizadas de Ganzúa (creación de tokens)


Ganzua login controller - En cada sitio crea los QR y administra los login. Controla que el token no esté expirado y que el usuario esté habilitado para esa app. 
GANZUA LIBRARY PARA LOGOUT

En acl_control se controla que el hash sea correcto.


En el config va la palabra secreta. 
$this->_CI->config->item("ganzua_palabra_secreta");
$this->_CI->config->item("ganzua_app_name");



El acl_usuarios_model tiene una función para updatear el deviceid y otra para traer al usuario por email
UPDATE DE DEVICE ID EN WHITELIST

FALTAAA///
actualizar card de computadora ingresada
icono
logout desde app


ur_apps tiene escritura PUBLICA para que pueda funcionar el logout. 


para el logout incluir en todo el sitio
<script src="https://www.gstatic.com/firebasejs/live/3.0/firebase.js"></script>
<script src="<?php echo asset_url(); ?>js/ganzua_logout.js"></script>